// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  surname       String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole     @default(USER)
  accounts      Account[]
  Restaurant    Restaurant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Restaurant {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  tables       Table[]
  MenuItem     MenuItem[]
  MenuCategory MenuCategory[]

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  tableNumber Int
  qrCode      String

  restaurantId String     @db.ObjectId
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float

  restaurantId String     @db.ObjectId
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  menuCategoryId String       @db.ObjectId
  MenuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuCategory {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  MenuItem MenuItem[]

  restaurantId String     @db.ObjectId
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, restaurantId])
}
